{
  "_args": [
    [
      {
        "raw": "dynamodb-model",
        "scope": null,
        "escapedName": "dynamodb-model",
        "name": "dynamodb-model",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Projects\\healthbuddy"
    ]
  ],
  "_from": "dynamodb-model@latest",
  "_id": "dynamodb-model@0.0.2",
  "_inCache": true,
  "_location": "/dynamodb-model",
  "_npmUser": {
    "name": "extrabacon",
    "email": "nicolas@extrabacon.net"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {
    "sax": "1.2.1"
  },
  "_requested": {
    "raw": "dynamodb-model",
    "scope": null,
    "escapedName": "dynamodb-model",
    "name": "dynamodb-model",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/dynamodb-model/-/dynamodb-model-0.0.2.tgz",
  "_shasum": "b186f7db42861e37f9776f58c544ba511d5d70bf",
  "_shrinkwrap": null,
  "_spec": "dynamodb-model",
  "_where": "C:\\Projects\\healthbuddy",
  "author": {
    "name": "Nicolas Mercier",
    "email": "nicolas@extrabacon.net"
  },
  "bugs": {
    "url": "http://github.com/extrabacon/dynamodb-model/issues"
  },
  "dependencies": {
    "async": "~0.2.9",
    "aws-sdk": "~1.9.0"
  },
  "description": "Elegant DynamoDB object modeling influenced from MongoDB and the Mongoose API",
  "devDependencies": {
    "chai": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "b186f7db42861e37f9776f58c544ba511d5d70bf",
    "tarball": "https://registry.npmjs.org/dynamodb-model/-/dynamodb-model-0.0.2.tgz"
  },
  "engines": {
    "node": ">=0.10"
  },
  "homepage": "http://github.com/extrabacon/dynamodb-model",
  "keywords": [
    "dynamo",
    "dynamodb",
    "aws",
    "orm",
    "mapping"
  ],
  "maintainers": [
    {
      "name": "extrabacon",
      "email": "nicolas@extrabacon.net"
    }
  ],
  "name": "dynamodb-model",
  "optionalDependencies": {},
  "readme": "# dynamodb-model\n\nA simple and lightweight object mapper for Amazon DynamoDB, influenced by MongoDB and the Mongoose API. This library allows mapping of DynamoDB tables to Javascript objects using schemas while providing a comfortable high-level API for maximum productivity. It also enables a smooth transition to DynamoDB if you already know MongoDB or Mongoose.\n\n## Objectives\n\n+ Support for the full DynamoDB feature set\n+ Models use the official AWS SDK module\n+ Independent schemas, free of dependencies\n+ Automatic table creation\n+ Transparent support for MongoDB operators, such as \"$gt\", \"$set\" or \"$inc\"\n+ API conventions based on [Mongoose](https://github.com/LearnBoost/mongoose)\n+ Good documentation\n+ Good unit test coverage\n+ Fast and lightweight\n\n## Installation\n\n```bash\nnpm install dynamodb-model\n```\n\nTo run the tests:\n\n```bash\nnpm test\n```\n\n## Documentation\n\n### Defining a schema to describe a DynamoDB table\n\nA schema describes attributes, keys, and indexes for a DynamoDB table. A schema instance allows mapping of Javascript objects to DynamoDB items and vice-versa.\n\n```javascript\nvar DynamoDBModel = require('dynamodb-model');\n\nvar productSchema = new DynamoDBModel.Schema({\n  productId: {\n    type: Number,\n    key: 'hash'     // indicates a Hash key\n  },\n  sku: String,\n  inStock: Boolean, // will be stored as a \"Y\" or \"N\" string\n  properties: {},   // will be converted to a JSON string\n  created: Date     // will be converted to a number with Date.getTime\n});\n```\n\n#### Schema Types\n\nSchemas support the following data types native to DynamoDB:\n\n* String\n* Number\n* Blob (via Node.js [Buffer](http://nodejs.org/api/buffer.html))\n* Array of strings\n* Array of numbers\n* Array of blobs (buffers)\n\nIn addition, schemas also support the following data types with some transformations:\n\n* Boolean (as a \"Y\" or \"N\" string)\n* Date (via `Date.getTime` as a number)\n* JSON or objects (via `JSON.stringify` and `JSON.parse`), defined using an empty object `{}`\n\nIt is also possible to implement you own mapping if necessary:\n\n```javascript\nvar DynamoDBModel = require('dynamodb-model');\n\nvar schema = new DynamoDBModel.Schema({\n  ...\n  customField: {\n    dynamoDbType: 'S', // the native DynamoDB type, either S, N, B, SS, NS or BS\n    mapFromDb: function(value) {\n      /* your implementation */\n    },\n    mapToDb: function(value) {\n      /* your implementation, must return a string */\n    }\n  }\n});\n```\n\n#### Keys\n\nTo specify a Hash or Range key, define a `key` attribute on the field.\n\n* Set to `\"hash\"` to specify a **Hash** key\n* Set to `\"range\"` to specify a **Range** key\n\n#### Local Secondary Indexes\n\nLocal secondary indexes are not yet supported.\n\n#### Default values\n\nThe specify a default value, use `default` to specify a static value or a function returning a value.\n\n```javascript\nvar DynamoDBModel = require('dynamodb-model');\n\nvar schema = new DynamoDBModel.Schema({\n  ...\n  active: {\n    type: Boolean,\n    default: true\n  }\n});\n```\n\nDefault values replace missing attributes when reading items from DynamoDB.\n\n#### Mapping objects manually\n\nSchemas are independent from the AWS SDK and can be used with any other DynamoDB client. To map an object to a DynamoDB structure manually, use `schema.mapToDb`. Likewise, to map a DynamoDB structure to an object, use `schema.mapFromDb`.\n\n```javascript\nvar DynamoDBModel = require('dynamodb-model');\n\nvar schema = new DynamoDBModel.Schema({\n  id: {\n    type: Number,\n    key: 'hash'\n  },\n  message: String\n});\n\nschema.mapToDb({ id: 1, message: 'some text' });\n// returns { id: { N: '1' }, message: { 'S': 'some text' } };\n\nschema.mapFromDb({ id: { N: '1' }, message: { 'S': 'some text' } });\n// returns { id: 1, message: 'some text' };\n```\n\n### Using a model to interact with a DynamoDB table\n\nThe `Model` class provides the high-level API you use to interact with the table, such as reading and writing data. The model class uses the official AWS SDK which already implement most of the best practices, such as automatic retries on a \"HTTP 400: Capacity Exceeded\" error.\n\nModels also create the table automatically if required. There is no need to validate table existence or the \"active\" status. Operations performed while the table is not ready are queued until the table becomes active.\n\n```javascript\nvar DynamoDBModel = require('dynamodb-model');\n\nvar productSchema = new DynamoDBModel.Schema({\n  productId: {\n    type: Number,\n    key: 'hash'\n  },\n  sku: String,\n  inStock: Boolean,\n  properties: {},\n  created: Date\n});\n\n// create a model using the name of the DynamoDB table and a schema\nvar productTable = new DynamoDBModel.Model('dynamo-products', productSchema);\n\n// the model provides methods for all DynamoDB operations\n// no need to check for table status, we can start using it right away\nproductTable.putItem(/* ... */);\nproductTable.getItem(/* ... */);\nproductTable.updateItem(/* ... */);\nproductTable.deleteItem(/* ... */);\n\n// but some of them return intermediate objects in order to provide a better API\nvar query = productTable.query(/* ... */);\nquery.select(/* ... */).limit(100).exec(callback);\n```\n\n#### About AWS connectivity and credentials\n\nThe `dynamodb-model` module uses the official AWS SDK module for low-level operations. To properly connect to your DynamoDB table, make sure you configure the AWS SDK first. More details on the official AWS website [here](http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/configuring.html).\n\n```javascript\nvar AWS = require('aws-sdk');\n\n// setup region and credentials\nAWS.config.update({\n    accessKeyId: /* Your acess key */,\n    secretAccessKey: /* Your secret key */,\n    region: 'us-east-1'\n});\n\n// specify the API version (optional)\nAWS.config.apiVersions = {\n    dynamodb: '2012-08-10'\n};\n```\n\nAdditionally, if you need to specify options for the `AWS.DynamoDB` constructor, pass them to the `Model` constructor like this:\n\n```javascript\nvar myTable = new DynamoDBModel.Model(tableName, schema, {\n  maxRetries: 1000,\n  sslEnabled: true\n});\n```\n\n#### About table status\n\nWhen creating a model instance, a `describeTable` call is immediately performed to check for table existence. If the table does not exist, a `createTable` call follows immediately.\n\nIf the table is not yet active (table status is not `\"ACTIVE\"`), all operations are queued and will not be executed until the table is ready. When the table becomes active, operations from the queue are executed in sequential order. This means that you can create a model instance and start writing data immediately, even if the table does not exist.\n\nIf you wish to wait for the table to become available before performing an action, use the `waitForActiveTable` method, which invokes `describeTable` repeatedly until the status switches to `\"ACTIVE\"`.\n\n**WARNING:** the queue is not durable and should not be used in a production environment, since changes will be lost if the application terminates before the table becomes active. Instead, create your table beforehand, or use the `waitForActiveTable` method to make sure the table is ready.\n\n#### Model.batchGetItem\n\nThis method is not yet implemented.\n\n[AWS Documentation for BatchGetItem](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html)\n\n#### Model.batchWriteItem\n\nThis method is not yet implemented.\n\n[AWS Documentation for BatchWriteItem](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html)\n\n#### Model.createTable(options, callback)\n\nCreates the DynamoDB table represented by the schema and returns the AWS service response.\n\n+ options: attributes to add to the AWS.Request instance (optional)\n+ callback: the callback function to invoke with the AWS response (optional)\n\n```javascript\nvar myTable = new DynamoDBModel.Model(tableName, schema);\nmyTable.createTable(function (err, response) {\n  // table creation started\n})\n```\n\nNote: table creation in DynamoDB is asynchronous. The table is not ready until its status property is set to \"ACTIVE\". If you need to wait for the table to become active, use the `waitForActiveTable` method.\n\n[AWS Documentation for CreateTable](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_CreateTable.html)\n\n#### Model.deleteItem(key, options, callback)\n\nDeletes a single item in a table by primary key and returns the AWS service response.\n\n+ key: an object representing the primary key of the item to remove\n+ options: attributes to add to the AWS.Request instance (optional)\n+ callback: the callback function to invoke with the AWS response (optional)\n\n```javascript\nvar myTable = new DynamoDBModel.Model(tableName, schema);\nmyTable.deleteItem({ id: 1 }, function (err, response) {\n  // item removed\n})\n```\n\n[AWS Documentation for DeleteItem](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html)\n\nNote: conditional deletes are not yet implemented.\n\n#### Model.deleteTable(options, callback)\n\nRemoves the table represented by the schema, as well as all items in the table, then returns the AWS service response.\n\n+ options: attributes to add to the AWS.Request instance (optional)\n+ callback: the callback function to invoke with the AWS response\n\n```javascript\nvar myTable = new DynamoDBModel.Model(tableName, schema);\nmyTable.deleteTable(function (err, response) {\n  // table removal started\n})\n```\n\n[AWS Documentation for DeleteTable](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteTable.html)\n\n#### Model.describeTable(options, callback)\n\nReturns information about the table represented by the schema, including the current status of the table, when it was created, the primary key schema, and any indexes on the table. The table description is the AWS service response.\n\n+ options: attributes to add to the AWS.Request instance (optional)\n+ callback: the callback function to invoke with the AWS response\n\n```javascript\nvar myTable = new DynamoDBModel.Model(tableName, schema);\nmyTable.describeTable(function (err, response) {\n  // response contains the table description, see AWS docs for more details\n})\n```\n\n#### Model.waitForActiveTable(pollingInterval, callback)\n\nInvokes `describeTable` repeatedly until the table status is `\"ACTIVE\"`.\n\n+ pollingInterval: the delay in milliseconds between each invocation of `describeTable` (optional, default value is 3000)\n+ callback: the callback function to invoke with the AWS response from `describeTable` (optional)\n\n```javascript\nvar myTable = new DynamoDBModel.Model(tableName, schema);\nvar pollingInterval = 5000; // 5 seconds\nmyTable.waitForActiveTable(pollingInterval, function (err, response) {\n  // response contains the table description, with an \"ACTIVE\" status\n})\n```\n\n#### Model.getItem(key, options, callback)\n\nRetrieves a specific item based on its primary key, returning the mapped item as well as the AWS service response.\n\n+ key: an object representing the primary key of the item to retrieve\n+ options: attributes to add to the AWS.Request instance (optional)\n+ callback: the callback function to invoke with the AWS response\n\n```javascript\nvar myTable = new DynamoDBModel.Model(tableName, schema);\nmyTable.getItem({ id: 1 }, function (err, item, response) {\n  // item represents the DynamoDB item mapped to an object using the schema\n})\n```\n\n[AWS Documentation for GetItem](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html)\n\n#### Model.listTables(options, callback)\n\nThis method is not yet implemented.\n\n+ options: attributes to add to the AWS.Request instance (optional)\n+ callback: the callback function to invoke with the AWS response\n\n[AWS Documentation for ListTables](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ListTables.html)\n\n#### Model.putItem(item, options, callback)\n\nTBD\n\n[AWS Documentation for PutItem](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html)\n\n#### Model.query\n\nTBD\n\n[AWS Documentation for Query](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Query.html)\n\n#### Model.scan\n\nTBD\n\n[AWS Documentation for Scan](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Scan.html)\n\n#### Model.updateItem\n\nTBD\n\n[AWS Documentation for UpdateItem](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html)\n\n#### Model.updateTable\n\nTBD\n\n[AWS Documentation for UpdateTable](http://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateTable.html)\n\n### Reading results with DynamoDBModel.Query\n\nTBD\n\n## Stability\n\nThis is the initial release of `dynamodb-model` and should not be considered production-ready yet. Some features are also missing (see TODO section).\n\n## TODO\n\n* Complete documentation\n* Implement local secondary indexes\n* Implement `BatchGetItem` operation\n* Implement `BatchWriteItem` operation\n* Add conditional support for `DeleteItem` operation\n* Add parallel support for `Scan` operation\n* Improve API to be closer to Mongoose, using aliases for common methods\n* Check for table key changes, which are unsupported by DynamoDB\n\n## Compatibility\n\n+ Tested with Node 0.10.x\n+ Tested on Mac OS X 10.8\n\n## Dependencies\n\n+ [async](http://github.com/caolan/async)\n+ [aws-sdk](http://github.com/aws/aws-sdk-js)\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013, Nicolas Mercier\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/extrabacon/dynamodb-model.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "0.0.2"
}
